package com.example.demo.service;

import org.junit.jupiter.api.Test;
import com.example.demo.config.JwtUtil;

import static org.junit.jupiter.api.Assertions.*;

public class JwtUtilTest {

    @Test
    void testGenerateTokenAndExtractUsername() {
        // üß™ Gera um token JWT e testa se √© poss√≠vel extrair corretamente o e-mail do usu√°rio

        String username = "lucas@example.com";

        // Gera√ß√£o do token
        String token = JwtUtil.generateToken(username);

        // Verifica√ß√µes:
        assertNotNull(token); // o token n√£o pode ser nulo
        assertTrue(token.startsWith("ey")); // tokens JWT v√°lidos normalmente come√ßam com "ey"

        // Extra√ß√£o do username a partir do token
        String extractedUsername = JwtUtil.extractUsername(token);

        // Verifica se o username extra√≠do √© igual ao original
        assertEquals(username, extractedUsername);
    }

    @Test
    void testValidateValidToken() {
        // üß™ Gera um token v√°lido e testa se ele passa na valida√ß√£o

        String token = JwtUtil.generateToken("lucas@example.com");

        // O m√©todo validateToken deve retornar true para um token v√°lido
        assertTrue(JwtUtil.validateToken(token));
    }

    @Test
    void testValidateInvalidToken() {
        // üß™ Testa a valida√ß√£o com um token completamente inv√°lido (estrutura incorreta)

        String invalidToken = "invalid.jwt.token";

        // O m√©todo deve retornar false pois o token n√£o √© v√°lido
        assertFalse(JwtUtil.validateToken(invalidToken));
    }

    @Test
    void testExpiredTokenShouldFailValidation() throws InterruptedException {
        // üß™ Testa um token "falsamente expirado" para simular falha de valida√ß√£o

        // Aqui n√£o estamos realmente esperando a expira√ß√£o, mas corrompendo o token
        // adicionando texto no final para invalid√°-lo
        String fakeExpiredToken = JwtUtil.generateToken("lucas@example.com") + "tampered";

        // Como o token foi adulterado, a valida√ß√£o deve falhar
        assertFalse(JwtUtil.validateToken(fakeExpiredToken));
    }
}
