package com.example.demo.service;

import com.example.demo.dto.AuthDTO;
import com.example.demo.model.User;
import com.example.demo.repository.UserRepository;
import org.junit.jupiter.api.Test;
import org.junit.jupiter.api.extension.ExtendWith;
import org.mockito.InjectMocks;
import org.mockito.Mock;
import org.mockito.junit.jupiter.MockitoExtension;
import org.springframework.security.crypto.password.PasswordEncoder;

import java.util.Optional;

import static org.junit.jupiter.api.Assertions.assertEquals;
import static org.junit.jupiter.api.Assertions.assertTrue;
import static org.mockito.ArgumentMatchers.any;
import static org.mockito.Mockito.when;

@ExtendWith(MockitoExtension.class)
public class AuthServiceTest {

    @Mock
    private UserRepository userRepository;

    @Mock
    private PasswordEncoder passwordEncoder;

    @InjectMocks
    private AuthService authService;

    @Test
    void testRegisterWhenUserAlreadyExists() {
        // 游빍 Testa o cen치rio onde o usu치rio j치 est치 cadastrado.
        // Espera-se que o m칠todo retorne a mensagem "Usu치rio j치 existe!" sem tentar salvar um novo usu치rio.
        AuthDTO dto = new AuthDTO("lucas@example.com", "123456");
        when(userRepository.findByUsername(dto.getUsername()))
            .thenReturn(Optional.of(new User()));

        String result = authService.register(dto);

        assertEquals("Usu치rio j치 existe!", result);
    }

    @Test
    void testAuthenticateSuccess() {
        // 游빍 Testa se a autentica칞칚o retorna true quando o usu치rio existe e a senha confere.
        // Simula um usu치rio existente com senha codificada e usa o PasswordEncoder para verificar a correspond칡ncia.
        AuthDTO dto = new AuthDTO("email@example.com", "12345");
        User user = new User();
        user.setUsername("email@example.com");
        user.setPassword("hashed");

        when(userRepository.findByUsername("email@example.com")).thenReturn(Optional.of(user));
        when(passwordEncoder.matches("12345", "hashed")).thenReturn(true);

        boolean result = authService.authenticate(dto);

        assertTrue(result);
    }

    @Test
    void testRegisterWhenUserDoesNotExist() {
        // 游빍 Testa o fluxo de registro de um novo usu치rio.
        // Simula um usu치rio que ainda n칚o existe no reposit칩rio e verifica se o retorno 칠 a mensagem de sucesso.
        AuthDTO dto = new AuthDTO("lucas@example.com", "123456");

        when(userRepository.findByUsername(dto.getUsername()))
            .thenReturn(Optional.empty());

        when(passwordEncoder.encode("123456")).thenReturn("hashedPass");
        when(userRepository.save(any(User.class))).thenReturn(new User());

        String result = authService.register(dto);

        assertEquals("Usu치rio registrado com sucesso!", result);
    }

    @Test
    void testAuthenticateWithInvalidPassword() {
    // 游빍 Simula autentica칞칚o com senha incorreta
    AuthDTO dto = new AuthDTO("email@example.com", "senhaErrada");
    User user = new User();
    user.setUsername("email@example.com");
    user.setPassword("senhaCorretaHash");

    when(userRepository.findByUsername("email@example.com"))
        .thenReturn(Optional.of(user));
    when(passwordEncoder.matches("senhaErrada", "senhaCorretaHash"))
        .thenReturn(false);

    boolean result = authService.authenticate(dto);

    // Espera-se que a autentica칞칚o falhe
    assertEquals(false, result);
}
@Test
void testAuthenticateUserNotFound() {
    // 游빍 Simula tentativa de login com usu치rio n칚o cadastrado
    AuthDTO dto = new AuthDTO("inexistente@example.com", "12345");

    when(userRepository.findByUsername(dto.getUsername()))
        .thenReturn(Optional.empty());

    boolean result = authService.authenticate(dto);

    // Espera-se que a autentica칞칚o falhe pois o usu치rio n칚o existe
    assertEquals(false, result);
}


    

}
